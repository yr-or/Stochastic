`timescale 1ns / 1ps

module NN_tb();

    // regs
    reg clk = 0;
    reg reset = 0;

    localparam NUM_TESTS = 100;

    //wires
    wire [7:0] results_bin [0:4];
    wire [7:0] macc_results_bin [0:4];
    wire done_stb;

    // Test data - binary probabilities
    reg [7:0] test_inputs [0:NUM_TESTS-1][0:7] = '{
        { 174, 171, 31, 234, 212, 178, 148, 44 },
        { 113, 92, 226, 34, 68, 118, 47, 14 },
        { 204, 255, 78, 2, 209, 93, 28, 193 },
        { 28, 176, 36, 187, 47, 154, 21, 187 },
        { 14, 126, 15, 169, 124, 99, 52, 171 },
        { 174, 189, 250, 2, 193, 73, 188, 117 },
        { 78, 227, 229, 148, 41, 155, 5, 105 },
        { 144, 192, 93, 24, 194, 244, 106, 119 },
        { 237, 223, 3, 59, 57, 67, 190, 93 },
        { 226, 180, 0, 183, 181, 51, 217, 34 },
        { 191, 83, 214, 106, 84, 212, 78, 187 },
        { 169, 124, 181, 72, 145, 213, 92, 254 },
        { 138, 45, 147, 131, 81, 23, 120, 14 },
        { 64, 217, 113, 185, 177, 237, 220, 14 },
        { 91, 7, 46, 47, 201, 89, 153, 204 },
        { 122, 58, 40, 187, 240, 197, 219, 15 },
        { 158, 123, 1, 137, 32, 121, 9, 72 },
        { 145, 242, 168, 79, 215, 69, 52, 60 },
        { 214, 220, 200, 206, 184, 107, 33, 235 },
        { 149, 238, 109, 144, 19, 7, 48, 48 },
        { 239, 201, 108, 112, 74, 140, 175, 108 },
        { 167, 25, 61, 245, 207, 39, 214, 54 },
        { 21, 255, 246, 127, 185, 28, 59, 113 },
        { 33, 191, 129, 47, 18, 189, 245, 23 },
        { 3, 151, 202, 60, 189, 68, 69, 126 },
        { 94, 147, 124, 54, 150, 57, 141, 79 },
        { 181, 196, 247, 147, 224, 243, 221, 224 },
        { 103, 24, 43, 241, 169, 209, 155, 92 },
        { 15, 0, 126, 91, 197, 125, 235, 25 },
        { 50, 27, 179, 244, 37, 243, 8, 0 },
        { 137, 78, 207, 2, 77, 34, 222, 188 },
        { 221, 218, 253, 96, 127, 197, 30, 148 },
        { 181, 138, 28, 22, 140, 134, 193, 211 },
        { 194, 98, 195, 35, 168, 75, 134, 170 },
        { 143, 94, 208, 14, 38, 216, 34, 120 },
        { 82, 72, 227, 131, 85, 12, 252, 250 },
        { 103, 50, 173, 59, 162, 166, 72, 11 },
        { 46, 148, 78, 168, 221, 127, 187, 204 },
        { 33, 17, 43, 2, 106, 24, 247, 63 },
        { 56, 178, 232, 249, 227, 238, 112, 6 },
        { 93, 100, 253, 113, 8, 64, 255, 243 },
        { 200, 126, 242, 216, 102, 213, 237, 168 },
        { 191, 152, 3, 102, 189, 222, 191, 94 },
        { 154, 184, 175, 101, 89, 10, 57, 157 },
        { 82, 26, 102, 80, 246, 51, 55, 33 },
        { 64, 213, 98, 232, 177, 246, 103, 28 },
        { 147, 252, 136, 156, 251, 199, 6, 92 },
        { 29, 202, 1, 26, 226, 11, 2, 55 },
        { 178, 3, 139, 73, 236, 93, 74, 160 },
        { 132, 228, 162, 88, 7, 192, 239, 178 },
        { 97, 147, 42, 252, 229, 47, 123, 47 },
        { 137, 212, 226, 64, 72, 47, 208, 57 },
        { 203, 212, 230, 39, 153, 67, 89, 6 },
        { 156, 106, 73, 42, 217, 237, 38, 54 },
        { 49, 104, 144, 91, 116, 14, 52, 43 },
        { 130, 108, 8, 188, 76, 197, 102, 236 },
        { 84, 151, 75, 234, 42, 68, 91, 144 },
        { 82, 231, 251, 40, 223, 216, 7, 21 },
        { 116, 202, 255, 166, 42, 90, 183, 12 },
        { 131, 175, 148, 168, 48, 142, 239, 5 },
        { 155, 1, 168, 157, 6, 241, 8, 57 },
        { 207, 221, 120, 150, 27, 213, 203, 192 },
        { 16, 172, 255, 187, 221, 197, 156, 192 },
        { 7, 130, 168, 84, 145, 39, 123, 147 },
        { 76, 217, 214, 22, 196, 52, 219, 193 },
        { 137, 116, 199, 129, 126, 25, 18, 162 },
        { 96, 184, 186, 247, 82, 139, 74, 193 },
        { 161, 84, 67, 20, 0, 233, 167, 29 },
        { 213, 75, 31, 182, 197, 65, 7, 99 },
        { 54, 249, 225, 151, 92, 155, 7, 154 },
        { 14, 110, 148, 75, 165, 210, 67, 210 },
        { 6, 195, 224, 65, 17, 70, 237, 206 },
        { 84, 60, 101, 76, 71, 21, 106, 143 },
        { 74, 154, 69, 230, 16, 197, 114, 218 },
        { 22, 107, 57, 236, 58, 248, 64, 144 },
        { 23, 95, 78, 61, 39, 61, 98, 179 },
        { 152, 80, 110, 18, 138, 104, 164, 178 },
        { 165, 244, 236, 112, 7, 227, 189, 252 },
        { 243, 45, 91, 122, 238, 24, 135, 89 },
        { 57, 117, 64, 54, 212, 62, 92, 253 },
        { 154, 111, 25, 65, 246, 222, 110, 220 },
        { 207, 197, 37, 173, 128, 42, 202, 240 },
        { 229, 168, 223, 138, 4, 0, 233, 92 },
        { 54, 236, 204, 17, 215, 70, 108, 96 },
        { 104, 243, 191, 216, 216, 46, 79, 192 },
        { 8, 212, 231, 249, 73, 13, 95, 27 },
        { 224, 62, 167, 29, 181, 108, 141, 234 },
        { 59, 206, 57, 56, 218, 21, 160, 14 },
        { 106, 82, 167, 236, 180, 98, 41, 38 },
        { 197, 253, 92, 31, 27, 42, 144, 233 },
        { 67, 203, 228, 238, 111, 134, 79, 241 },
        { 163, 127, 24, 86, 237, 160, 216, 91 },
        { 138, 127, 92, 59, 120, 39, 49, 53 },
        { 183, 203, 122, 200, 234, 142, 32, 53 },
        { 91, 234, 224, 249, 37, 149, 254, 76 },
        { 145, 188, 105, 51, 99, 102, 35, 63 },
        { 205, 57, 185, 169, 24, 238, 111, 78 },
        { 178, 153, 240, 146, 234, 254, 200, 108 },
        { 155, 230, 93, 28, 123, 136, 189, 4 },
        { 169, 230, 244, 99, 188, 120, 199, 0 }
    };

    // Regs to apply test data to
    reg [7:0] input_data_bin [0:NUM_TESTS-1];

    // Inst. NN_top
    NN_top dut(
        .clk                (clk),
        .reset              (reset),
        .input_data_bin     (input_data_bin),
        .results_bin        (results_bin),
        .macc_results_bin   (macc_results_bin),
        .done               (done_stb)
    );

    integer fd;     // file descriptor

    // Apply test data in order
    initial begin
        fd = $fopen("NN_data.txt", "w");
        reset = 1;
        #10;

        for (int i=0; i<NUM_TESTS; i=i+1) begin
            // Set inputs
            reset = 1;
            input_data_bin = test_inputs[i];

            // Hold reset for 2 clks
            #40;
            reset = 0;

            // Wait 256 clock cycles
            #5100;
            // print results
            //$fdisplay(fd, "Test: %d", i+1);
            $fdisplay(fd, "Test: %d, Results: %d, %d, %d, %d, %d", i+1, results_bin[0], results_bin[1], results_bin[2], results_bin[3], results_bin[4]);
            //$fdisplay(fd, "Macc results: %d, %d, %d, %d, %d", macc_results_bin[0], macc_results_bin[1], macc_results_bin[2], macc_results_bin[3], macc_results_bin[4]);
        end
        $fclose(fd);
    end

    // Clock gen
    always begin
        #10;
        clk = ~clk;
    end

endmodule
